/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { VRFConsumerV2, VRFConsumerV2Interface } from "../VRFConsumerV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "vrfCoordinator",
        type: "address",
      },
      {
        internalType: "address",
        name: "link",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "conduitController",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "ReturnedRandomness",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "numerators",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "s_numWords",
        type: "uint32",
      },
    ],
    name: "requestRandomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_randomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_requestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101a0604052620f4240610120526003610140526103e8610160526127106101805234801561002d57600080fd5b5060405161075d38038061075d83398101604081905261004c916100a8565b506001600160a01b03928316608081905260a052911660c05261010052600280546001600160a01b031916331790556001600160401b031660e052610114565b80516001600160a01b03811681146100a357600080fd5b919050565b600080600080600060a086880312156100c057600080fd5b85516001600160401b03811681146100d757600080fd5b94506100e56020870161008c565b93506100f36040870161008c565b9250606086015191506101086080870161008c565b90509295509295909350565b60805160a05160c05160e05161010051610120516101405161016051610180516105dc6101816000396000505060005050600061021501526000610241015260006101bc015260006101eb015260005050600061027301526000818160ed015261015501526105dc6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063e89e106a11610050578063e89e106a146100a6578063f6eaffc8146100af578063f86eb11f146100c257600080fd5b80631fe543e31461006c578063e726f2e114610081575b600080fd5b61007f61007a366004610411565b6100d5565b005b61009461008f3660046104f9565b610194565b60405190815260200160405180910390f35b61009460015481565b6100946100bd366004610526565b610300565b6100946100d0366004610526565b610321565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610186576040517f1cf993f400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602482015260440160405180910390fd5b6101908282610331565b5050565b6040517f5d3b1d300000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602482015261ffff7f000000000000000000000000000000000000000000000000000000000000000016604482015263ffffffff7f000000000000000000000000000000000000000000000000000000000000000081166064830152821660848201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635d3b1d309060a4016020604051808303816000875af11580156102d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f5919061053f565b600181905592915050565b6000818154811061031057600080fd5b600091825260209091200154905081565b6003818154811061031057600080fd5b8051610344906000906020840190610382565b507f68f6adf8851f96fb54bce56dbb5ff1bc6b368aeaf5d3d1aedc38fb1548d354678282604051610376929190610558565b60405180910390a15050565b8280548282559060005260206000209081019282156103bd579160200282015b828111156103bd5782518255916020019190600101906103a2565b506103c99291506103cd565b5090565b5b808211156103c957600081556001016103ce565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561042457600080fd5b8235915060208084013567ffffffffffffffff8082111561044457600080fd5b818601915086601f83011261045857600080fd5b81358181111561046a5761046a6103e2565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156104ad576104ad6103e2565b6040529182528482019250838101850191898311156104cb57600080fd5b938501935b828510156104e9578435845293850193928501926104d0565b8096505050505050509250929050565b60006020828403121561050b57600080fd5b813563ffffffff8116811461051f57600080fd5b9392505050565b60006020828403121561053857600080fd5b5035919050565b60006020828403121561055157600080fd5b5051919050565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156105995784518352938301939183019160010161057d565b509097965050505050505056fea264697066735822122036da461b661fe877e7c88ebe4214f77b7c51002d52a5a96731728bdb5e44f01d64736f6c63430008140033";

type VRFConsumerV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VRFConsumerV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VRFConsumerV2__factory extends ContractFactory {
  constructor(...args: VRFConsumerV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    subscriptionId: BigNumberish,
    vrfCoordinator: string,
    link: string,
    keyHash: BytesLike,
    conduitController: string,
    overrides?: Overrides & { from?: string }
  ): Promise<VRFConsumerV2> {
    return super.deploy(
      subscriptionId,
      vrfCoordinator,
      link,
      keyHash,
      conduitController,
      overrides || {}
    ) as Promise<VRFConsumerV2>;
  }
  override getDeployTransaction(
    subscriptionId: BigNumberish,
    vrfCoordinator: string,
    link: string,
    keyHash: BytesLike,
    conduitController: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      subscriptionId,
      vrfCoordinator,
      link,
      keyHash,
      conduitController,
      overrides || {}
    );
  }
  override attach(address: string): VRFConsumerV2 {
    return super.attach(address) as VRFConsumerV2;
  }
  override connect(signer: Signer): VRFConsumerV2__factory {
    return super.connect(signer) as VRFConsumerV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VRFConsumerV2Interface {
    return new utils.Interface(_abi) as VRFConsumerV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VRFConsumerV2 {
    return new Contract(address, _abi, signerOrProvider) as VRFConsumerV2;
  }
}
